{
    "componentChunkName": "component---src-templates-mdx-js",
    "path": "/community/core/docs/adr/0002-release-policy.md",
    "result": {"data":{"site":{"siteMetadata":{"title":"Thoth Station Help"}},"mdx":{"id":"f2fe0057-62b5-59b4-a59c-2b21220acb26","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Project Thoth Release Policy\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Status: proposed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Date: 2020-Nov-04\")), mdx(\"p\", null, \"Technical Story: As an Open Source project, we want to document the policies and guideline on how we create a new\\nrelease.\"), mdx(\"h2\", null, \"Context and Problem Statement\"), mdx(\"p\", null, \"Project Thoth itself consists of many components all having their own release cycles and delivery artifacts such as\\ncontainer image or Python libraries.\"), mdx(\"h2\", null, \"Considered Options\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a monolithic, coordinated release of all components by creating a tag within the thoth-application repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"have a rolling release, and no tags on any repository\")), mdx(\"h2\", null, \"Decision Outcome\"), mdx(\"p\", null, \"Chosen option: we do a monolithic, coordinated release, because it will enable us to have a release at the\\nproject/product level while maintianing freedom of others to update.\"), mdx(\"h3\", null, \"Positive Consequences \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"users have a clear base line of versions, these versions have been tested with each other and have\\nundergone integration testing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a release can be referenced from documents, so that operational procedures have a clear relationship with component\\nversions being used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we can maintain sets of different versions for different deployment environments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we can provide a version string with each API provided by the project\")), mdx(\"h3\", null, \"Negative Consequences \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A release might not contain the latest versions of components\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"srcLink":"https://github.com/thoth-station/core/blob/master/docs/adr/0002-release-policy.md"},"frontmatter":{"title":"","description":null}}},"pageContext":{"id":"f2fe0057-62b5-59b4-a59c-2b21220acb26"}},
    "staticQueryHashes": ["1276261476","2902925331","3000541721","489485899"]}